# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1babNVcRUa4ega2bVAMl3iZX01IomVVGd
"""

print("Bem vindo a livraria de Arthur Vinicius")

lista_livro = []
id_global = 0

def cadastrar_livro(id):
    nome = input("Digite o nome do livro: ")
autor = input("Digite o autor do livro: ")
editora = input("Digite a editora do livro: ")
livro = {
   "id": id,
{
    "nome": nome,
    "autor": autor,
    "editora": editora
}
}
lista_livro.append(livro)
print("Livro cadastrado com sucesso!")

def consultar_livro():
 while True:
  print("Consultar Livro:")
  print("1. Consultar Todos")
  print("2. Consultar por Id")
  print("3. Consultar por Autor")
  print("4. Retornar ao menu")
  opcao = input("Escolha uma opção: ")

  if opcao == '1':
   print("Lista de todos os livros:")
   for livro in lista_livro:
    print(livro)
  elif opcao == '2':
   id_consulta = int(input("Digite o ID do livro: "))
   encontrado = False
   for livro in lista_livro:
    if livro["id"] == id_consulta:
     print(livro)
     encontrado = True
     break
   if not encontrado:
    print("Livro não encontrado")
   elif opcao == '3':
    autor_consulta = input("Digite o autor do livro: ")
    encontrados = [livro for livro in lista_livro if livro["autor"].lower() == autor_consulta.lower()]
    if encontrados:
     for livro in encontrados:
      print(livro)
    else:
     print("Nenhum livro encontrado para o autor")
  elif opcao == '4':
    break
  else:
   print("Opção inválida")

def remover_livro():
 while True:
  try:
   id_remove = int(input("Digite o ID do livro a ser removido: "))
   livro_encontrado = next((livro for livro in lista_livro if livro["id"] == id_remove), None)
   if livro_encontrado:
    lista_livro.remove(livro_encontrado)
    print("Livro removido com sucesso!")
    break
   else:
    print("Id inválido. Tente novamente.")
  except ValueError:
    print("Id inválido. Tente novamente.")
while True:
 print("Menu")
 print("1. Cadastrar Livro")
 print("2. Consultar Livro")
 print("3. Remover Livro")
 print("4. Encerrar Programa")
 opcao = input("Escolha uma opção: ")

 if opcao == '1':
  id_global += 1
  cadastrar_livro(id_global)
 elif opcao == '2':
  consultar_livro()
 elif opcao == '3':
  remover_livro()
 elif opcao == '4':
  print("Finalizando o programa...")
  break
 else:
  print("Opção inválida. Tente novamente.")

# A - Implementar o print com uma mensagem de boas-vindas que apareça o seu nome.
print("bem vindo a livraria de Arthur Vinicius")

# B - Implementar uma lista vazia chamada lista_livro e uma variável id_global com valor inicial igual a 0.
lista_livro = []
id_global = 0

# C - Implementar uma função chamada cadastrar_livro(id).
def cadastrar_livro(id):
    # C.a - Pergunta nome, autor, editora do livro.
    nome = input("Digite o nome do livro: ")
    autor = input("Digite o autor do livro: ")
    editora = input("Digite a editora do livro: ")
    # C.b - Armazena o id (fornecido via parâmetro da função), nome, autor, editora dentro de um dicionário.
    livro = {
        "id": id,
        "nome": nome,
        "autor": autor,
        "editora": editora
    }
    # C.c - Copiar o dicionário para dentro da lista_livro.
    lista_livro.append(livro)
    print("Livro cadastrado com sucesso!")

# D - Implementar uma função chamada consultar_livro().
def consultar_livro():
    while True:
        # D.a - Perguntar qual opção deseja (1. Consultar Todos / 2. Consultar por Id / 3. Consultar por Autor / 4. Retornar ao menu).
        print("Consultar Livro:")
        print("1. Consultar Todos")
        print("2. Consultar por Id")
        print("3. Consultar por Autor")
        print("4. Retornar ao menu")
        opcao = input("Escolha uma opção: ")

        if opcao == '1':
            # D.a.1 - Se Consultar Todos, apresentar todos os livros com todos os seus dados cadastrados.
            print("Lista de todos os livros:")
            for livro in lista_livro:
                print(livro)
        elif opcao == '2':
            # D.a.2 - Se Consultar por Id, apresentar o livro específico com todos os seus dados cadastrados.
            id_consulta = int(input("Digite o ID do livro: "))
            encontrado = False
            for livro in lista_livro:
                if livro["id"] == id_consulta:
                    print(livro)
                    encontrado = True
                    break
            if not encontrado:
                print("Livro não encontrado")
        elif opcao == '3':
            # D.a.3 - Se Consultar por Autor, apresentar o(s) livro(s) do autor com todos os seus dados cadastrados.
            autor_consulta = input("Digite o autor do livro: ")
            encontrados = [livro for livro in lista_livro if livro["autor"].lower() == autor_consulta.lower()]
            if encontrados:
                for livro in encontrados:
                    print(livro)
            else:
                print("Nenhum livro encontrado para o autor")
        elif opcao == '4':
            # D.a.4 - Se Retornar ao menu, deve-se retornar ao menu principal.
            break
        else:
            # D.b - Se entrar com um valor diferente de 1, 2, 3 ou 4, printar “Opção inválida" e repetir a pergunta.
            print("Opção inválida")

# E - Implementar uma função chamada remover_livro().
def remover_livro():
    while True:
        try:
            # E.a - Perguntar pelo id do livro a ser removido.
            id_remove = int(input("Digite o ID do livro a ser removido: "))
            # E.b - Remover o livro da lista_livro.
            livro_encontrado = next((livro for livro in lista_livro if livro["id"] == id_remove), None)
            if livro_encontrado:
                lista_livro.remove(livro_encontrado)
                print("Livro removido com sucesso!")
                break
            else:
                # E.c - Se o id fornecido não for de um livro da lista, printar “Id inválido” e repetir a pergunta.
                print("Id inválido. Tente novamente.")
        except ValueError:
            print("Id inválido. Tente novamente.")

# F - Implementar uma estrutura de menu no código principal.
while True:
    # F.a - Perguntar qual opção deseja (1. Cadastrar Livro / 2. Consultar Livro / 3. Remover Livro / 4. Encerrar Programa).
    print("Menu")
    print("1. Cadastrar Livro")
    print("2. Consultar Livro")
    print("3. Remover Livro")
    print("4. Encerrar Programa")
    opcao = input("Escolha uma opção: ")

    if opcao == '1':
        # F.a.1 - Se Cadastrar Livro, acrescentar em um id_global e chamar a função cadastrar_livro(id_global).
        id_global += 1
        cadastrar_livro(id_global)
    elif opcao == '2':
        # F.a.2 - Se Consultar Livro, chamar função consultar_livro().
        consultar_livro()
    elif opcao == '3':
        # F.a.3 - Se Remover Livro, chamar função remover_livro().
        remover_livro()
    elif opcao == '4':
        # F.a.4 - Se Encerrar Programa, sair do menu (e com isso acabar a execução do código).
        print("Finalizando o programa...")
        break
    else:
        # F.b - Se entrar com um valor diferente de 1, 2, 3 ou 4, printar “Opção inválida" e repetir a pergunta.
        print("Opção inválida. Tente novamente.")

# G - Implementar uma lista de dicionários.

from tabulate import tabulate

class PersonagemRPG:
    def __init__(self, **dados):
        # Dados do personagem
        self.dados = dados

        # Atributos básicos
        self.forca = dados.get("forca", 10)
        self.velocidade = dados.get("velocidade", 10)
        self.constituicao = dados.get("constituicao", 10)
        self.inteligencia = dados.get("inteligencia", 10)
        self.sabedoria = dados.get("sabedoria", 10)
        self.carisma = dados.get("carisma", 10)

        # Atributos avançados (porcentagem de aumento)
        self.forca_avan = dados.get("forca_avan", 0)
        self.velocidade_avan = dados.get("velocidade_avan", 0)
        self.constituicao_avan = dados.get("constituicao_avan", 0)
        self.inteligencia_avan = dados.get("inteligencia_avan", 0)
        self.sabedoria_avan = dados.get("sabedoria_avan", 0)
        self.carisma_avan = dados.get("carisma_avan", 0)

        # Multiplicadores de raça para Vida, Mana e Aura
        self.multiplicador_raca_vida = dados.get("multiplicador_raca_vida", 1.0)
        self.multiplicador_raca_mana = dados.get("multiplicador_raca_mana", 1.0)
        self.multiplicador_raca_aura = dados.get("multiplicador_raca_aura", 1.0)

        # Experiência atual (configurado manualmente)
        self.exp_atual = dados.get("exp_atual", 0)
        # Calcular o nível com base na experiência atual
        self.nivel, self.exp_atual, self.exp_necessaria = self.calcular_nivel(self.exp_atual)

        # Valores atuais (para vida, mana, aura) que podem ser definidos por você
        self.vida_atual = dados.get("vida_atual", 0)
        self.mana_atual = dados.get("mana_atual", 0)
        self.aura_atual = dados.get("aura_atual", 0)

        # Calculando os valores totais de vida, mana, aura e XP
        self.calcular_condicao()

    def calcular_nivel(self, exp_atual):
        """Calcula o nível com base na experiência atual"""
        nivel = 1
        exp_necessaria = 10 * nivel + (10 * (nivel - 1))  # Fórmula de exp necessária para o nível 1
        while exp_atual >= exp_necessaria:
            exp_atual -= exp_necessaria
            nivel += 1
            exp_necessaria = 10 * nivel + (10 * (nivel - 1))  # Recalcula a exp necessária para o próximo nível
        return nivel, exp_atual, exp_necessaria  # Retorna o nível, a exp restante e a exp necessária

    def atualizar_exp(self, exp_atual):
        """Atualiza a experiência do personagem e recalcula o nível"""
        self.exp_atual = exp_atual
        self.nivel, self.exp_atual, self.exp_necessaria = self.calcular_nivel(self.exp_atual)

    def calcular_condicao(self):
        """Calcula a condição do personagem, com vida, mana, aura, PE e outros."""
        # Aumento composto dos atributos básicos (25% por nível)
        def calcular_aumento_composto(valor_base, nivel):
            for i in range(1, nivel):
                valor_base *= 1.25  # Aumenta em 25% a cada nível
            return valor_base

        # Aplicando o aumento composto para cada atributo básico
        self.forca_basico = calcular_aumento_composto(self.forca, self.nivel)
        self.velocidade_basico = calcular_aumento_composto(self.velocidade, self.nivel)
        self.constituicao_basico = calcular_aumento_composto(self.constituicao, self.nivel)
        self.inteligencia_basico = calcular_aumento_composto(self.inteligencia, self.nivel)
        self.sabedoria_basico = calcular_aumento_composto(self.sabedoria, self.nivel)
        self.carisma_basico = calcular_aumento_composto(self.carisma, self.nivel)

        # Atributos totais (básico + aumento avançado)
        self.forca_total = self.forca_basico + (self.forca_basico * self.forca_avan / 100)
        self.velocidade_total = self.velocidade_basico + (self.velocidade_basico * self.velocidade_avan / 100)
        self.constituicao_total = self.constituicao_basico + (self.constituicao_basico * self.constituicao_avan / 100)
        self.inteligencia_total = self.inteligencia_basico + (self.inteligencia_basico * self.inteligencia_avan / 100)
        self.sabedoria_total = self.sabedoria_basico + (self.sabedoria_basico * self.sabedoria_avan / 100)
        self.carisma_total = self.carisma_basico + (self.carisma_basico * self.carisma_avan / 100)

        # Cálculo de Vida, Mana e Aura com base nos atributos totais e multiplicadores de raça
        self.vida_max = round((self.constituicao_total + (self.forca_total / 2)) * self.multiplicador_raca_vida, 2)
        self.mana_max = round((self.inteligencia_total + (self.sabedoria_total / 2)) * self.multiplicador_raca_mana, 2)
        self.aura_max = round((self.forca_total + self.constituicao_total + (self.inteligencia_total / 2)) * self.multiplicador_raca_aura, 2)

        # Atualizando PE (Pontos de Existência) com os valores totais
        self.pe = round(self.vida_max + self.mana_max + self.aura_max + self.forca_total + self.velocidade_total +
                        self.constituicao_total + self.inteligencia_total + self.sabedoria_total + self.carisma_total, 2)

    def exibir_informacoes(self):
        """Exibe as informações do personagem em uma tabela formatada"""
        print(f"Informações do Personagem")
        info_personagem = [
            ["Nome", self.dados.get("nome", "N/A")],
            ["Idade", self.dados.get("idade", "N/A")],
            ["Raça", self.dados.get("raca", "N/A")],
            ["Classe", self.dados.get("classe", "N/A")],
            ["Jogador", self.dados.get("jogador", "N/A")],
            ["Nível", self.nivel]
        ]
        print(tabulate(info_personagem, headers=["Informação", "Valor"], tablefmt="fancy_grid"))

        # Exibindo a condição (Vida, Mana, Aura, PE) com barras de progresso
        print("\nCondição:")
        condicao = [
            ["Vida", self.vida_atual, self.vida_max],
            ["Mana", self.mana_atual, self.mana_max],
            ["Aura", self.aura_atual, self.aura_max],
            ["Pontos de Existência (PE)", self.pe, self.pe],  # Atual e Máxima iguais
            ["EXP", self.exp_atual, self.exp_necessaria]  # EXP com valores atuais e necessários
        ]

        # Barra de Progresso
        for item in condicao:
            if len(item) == 3 and isinstance(item[1], (int, float)):  # Garantir que a barra de progresso tenha 3 valores
                try:
                    progresso = float(item[1]) / float(item[2]) if float(item[2]) != 0 else 0
                except ValueError:
                    progresso = 0  # Se não for possível converter, assume-se como 0
                barra = f"[{'#' * int(progresso * 20)}{'-' * (20 - int(progresso * 20))}]"
                item.append(barra)
            else:
                item.append("-")

        # Exibindo a tabela com as colunas renomeadas
        print(tabulate(condicao, headers=["Status", "Atual", "Máxima", "Barra"], tablefmt="fancy_grid"))

        # Exibindo os atributos (Básico, Avançado, Total lado a lado)
        print("\nAtributos")
        atributos = [
            ["Força", self.forca_basico, self.forca_avan, self.forca_total],
            ["Velocidade", self.velocidade_basico, self.velocidade_avan, self.velocidade_total],
            ["Constituição", self.constituicao_basico, self.constituicao_avan, self.constituicao_total],
            ["Inteligência", self.inteligencia_basico, self.inteligencia_avan, self.inteligencia_total],
            ["Sabedoria", self.sabedoria_basico, self.sabedoria_avan, self.sabedoria_total],
            ["Carisma", self.carisma_basico, self.carisma_avan, self.carisma_total]
        ]
        print(tabulate(atributos, headers=["Atributo", "Básico", "Avançado", "Total"], tablefmt="fancy_grid"))

        # Exibindo habilidades
        print("\nHabilidades:")
        habilidades = [["Habilidade", "Descrição"]]
        for habilidade, descricao in self.dados.get("habilidades", {}).items():
            habilidades.append([habilidade, descricao])
        print(tabulate(habilidades, headers="firstrow", tablefmt="fancy_grid"))

        # Exibindo itens
        print("\nItens:")
        itens = [["Item", "Quantidade"]]  # Definindo corretamente a variável 'itens'
        for item, quantidade in self.dados.get("itens", {}).items():  # Iterando sobre o dicionário de itens
            itens.append([item, quantidade])  # Adicionando as informações de item e quantidade
        print(tabulate(itens, headers="firstrow", tablefmt="fancy_grid"))

# Dados do personagem
dados_personagem = {
    "nome": "Aragorn",
    "idade": 87,
    "raca": "Humano",
    "classe": "Guerreiro",
    "jogador": "Jogador1",
    "forca": 15,
    "velocidade": 12,
    "constituicao": 14,
    "inteligencia": 10,
    "sabedoria": 12,
    "carisma": 14,
    "forca_avan": 20,
    "velocidade_avan": 10,
    "constituicao_avan": 25,
    "inteligencia_avan": 5,
    "sabedoria_avan": 10,
    "carisma_avan": 15,
    "multiplicador_raca_vida": 1.1,
    "multiplicador_raca_mana": 1.05,
    "multiplicador_raca_aura": 1.15,
    "exp_atual": 1000,
    "vida_atual": 85,
    "mana_atual": 45,
    "aura_atual": 60,
    "habilidades": {
        "Espada Longa": "Aumenta o dano com espadas longas.",
        "Liderança": "Aumenta a moral dos aliados."
    },
    "itens": {
        "Poção de Vida": 3,
        "Poção de Mana": 2,
        "Espada Longa": 1
    }
}

# Criando o personagem e exibindo suas informações
personagem = PersonagemRPG(**dados_personagem)
personagem.exibir_informacoes()

x = int(input("Digite um número: "))
y = int(input("Digite outro número: "))

print ("1 = soma")
print ("2 = subtração")
print ("3 = multiplicação ")
print ("4 = divisão")

z = int(input("Escolha uma função:"))

if z == 1:
  print("a soma deu", x + y)
elif z == 2:
  print("a subtração deu", x - y)
elif z == 3:
  print("a multiplicação deu", x * y)
elif z == 4:
  print("a divisão deu", x / y)
  print("e sobrou", x % y)
else:
    print("opção inválida")

